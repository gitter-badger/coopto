<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!-- 
/*	This file is part of project "Coopto", a computer software plugin for 		*
 *  utilizing Docker in VMware vRealize Orchestrator.							*
 *																				*
 *	Copyright (C) 2014-2015  Robert Szymczak	(rszymczak@fum.de)				*
 *																				*
 *																				*
 *	This program is free software: you can redistribute it and/or modify		*
 *	it under the terms of the GNU Lesser General Public License as published 	*
 *	by the Free Software Foundation, either version 3 of the License, or		*
 *	(at your option) any later version.											*
 *																				*
 *	This program is distributed in the hope that it will be useful,				*
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of				*
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  						*
 *	See the GNU Lesser General Public License for more details.					*
 *																				*
 *	You should have received a copy of the GNU Lesser General Public License	*
 *	along with this program.  If not, see <http://www.gnu.org/licenses/>.		*/
 -->
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item6" object-name="workflow:name=generic" id="a738637c-5773-4205-b9c0-54015dd39452"  version="0.0.1" api-version="3.1.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0" >
<display-name><![CDATA[Play Command & Conquer]]></display-name>
<description><![CDATA[This is a showcase workflow which demos creation a browser based game using docker containers.

Author: Robert Szymczak (rszymczak@fum.de)]]></description>
<position x='100.0' y='50.0'/>
<input><param name='node' type='Coopto:DockerNode' >
<description><![CDATA[Node to deploy to]]></description>
</param>
<param name='containerName' type='string' >
<description><![CDATA[Container name to use]]></description>
</param>
</input><output><param name='containerOut' type='Coopto:DockerContainer' >
</param>
</output><attrib name='imageTag' type='string' read-only='false' ><value encoded='n'><![CDATA[m451/command-and-conquer:latest]]></value>
</attrib>
<attrib name='image' type='Coopto:DockerImage' read-only='false' ><value encoded='n'><![CDATA[__NULL__]]></value>
</attrib>
<attrib name='containerId' type='string' read-only='false' ><value encoded='n'><![CDATA[]]></value>
</attrib>
<attrib name='container' type='Coopto:DockerContainer' read-only='false' ><value encoded='n'><![CDATA[__NULL__]]></value>
</attrib>
<attrib name='publishAllPorts' type='boolean' read-only='false' ><value encoded='n'><![CDATA[true]]></value>
</attrib>
<attrib name='openStdin' type='boolean' read-only='false' ><value encoded='n'><![CDATA[true]]></value>
</attrib>
<attrib name='stdInOnce' type='boolean' read-only='false' ><value encoded='n'><![CDATA[true]]></value>
</attrib>
<attrib name='ports' type='Array/Coopto:DockerPort' read-only='false' ><value encoded='n'><![CDATA[__NULL__]]></value>
</attrib>
<workflow-item name='item0' type='end' end-mode='0' >
<position x='1084.5' y='45.40909090909091'/>
</workflow-item>
<workflow-item name='item1' out-name='item2' type='link' linked-workflow-id='c6ed4a86-bff5-428d-afdf-3468468bbeb2' >
<display-name><![CDATA[Pull if NotExists]]></display-name>
<in-binding><bind name='imageTag' type='string' export-name="imageTag" ></bind>
<bind name='node' type='Coopto:DockerNode' export-name="node" ></bind>
</in-binding><out-binding><bind name='image' type='Coopto:DockerImage' export-name="image" ></bind>
</out-binding><description><![CDATA[Will check if a image exists on a given node and pull it if not.
Will return the image in any case if pull dosn't fail.

Be aware: you have to use fully-qualified tags here, e.g. hackmann/empty:latest instead of hackmann/empty.

Author: Robert Szymczak (rszymczak@fum.de)]]></description>
<position x='344.5' y='55.40909090909091'/>
</workflow-item>
<workflow-item name='item2' out-name='item5' type='task' script-module='de.fum.coopto.containers/createContainerFromImage' >
<display-name><![CDATA[createContainerFromImage]]></display-name>
<script encoded='false'><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("de.fum.coopto.containers").createContainerFromImage(image,ports,volumes,name,cmd,env,workingDir,hostname,user,attachStdIn,attachStdOut,attachStdErr,tty,openStdIn,stdInOnce,NetworkDisabled) ;]]></script>
<in-binding><bind name='image' type='Coopto:DockerImage' export-name="image" ></bind>
<bind name='name' type='string' export-name="containerName" ></bind>
<bind name='cmd' type='Array/string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='env' type='Array/string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='attachStdIn' type='boolean' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='attachStdOut' type='boolean' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='attachStdErr' type='boolean' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='tty' type='boolean' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='stdInOnce' type='boolean' export-name="stdInOnce" ></bind>
<bind name='user' type='string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='openStdIn' type='boolean' export-name="openStdin" ></bind>
<bind name='workingDir' type='string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='NetworkDisabled' type='boolean' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='ports' type='Array/Coopto:DockerPort' export-name="ports" ></bind>
<bind name='hostname' type='string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='volumes' type='Array/Coopto:DockerVolume' explicitly-not-bound='true' export-name="NULL" ></bind>
</in-binding><out-binding><bind name='actionResult' type='string' export-name="containerId" ></bind>
</out-binding><position x='484.5' y='55.40909090909091'/>
</workflow-item>
<workflow-item name='item3' out-name='item4' type='task' script-module='de.fum.coopto.containers/startContainer' >
<display-name><![CDATA[startContainer]]></display-name>
<script encoded='false'><![CDATA[//Auto generated script, cannot be modified !
System.getModule("de.fum.coopto.containers").startContainer(container,links,portBindings,volumeBindings,dns,dnsSearch,publishAllPorts) ;]]></script>
<in-binding><bind name='container' type='Coopto:DockerContainer' export-name="container" ></bind>
<bind name='dns' type='Array/string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='dnsSearch' type='Array/string' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='links' type='Array/Coopto:DockerLink' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='publishAllPorts' type='boolean' export-name="publishAllPorts" ></bind>
<bind name='volumeBindings' type='Array/Coopto:DockerVolumeBind' explicitly-not-bound='true' export-name="NULL" ></bind>
<bind name='portBindings' type='Array/Coopto:DockerPortBind' explicitly-not-bound='true' export-name="NULL" ></bind>
</in-binding><out-binding></out-binding><position x='764.5' y='55.40909090909091'/>
</workflow-item>
<workflow-item name='item4' out-name='item0' type='task' >
<display-name><![CDATA[Info]]></display-name>
<script encoded='false'><![CDATA[System.log("Command & Conquer deployed!");
System.log("Play it at " + node.getHostName()+":"+container.getPrimaryBind());

containerOut = container;]]></script>
<in-binding><bind name='node' type='Coopto:DockerNode' export-name="node" ></bind>
<bind name='container' type='Coopto:DockerContainer' export-name="container" ></bind>
</in-binding><out-binding><bind name='containerOut' type='Coopto:DockerContainer' export-name="containerOut" ></bind>
</out-binding><position x='904.5' y='55.40909090909091'/>
</workflow-item>
<workflow-item name='item5' out-name='item3' type='task' script-module='de.fum.coopto.containers/getContainerById' >
<display-name><![CDATA[getContainerById]]></display-name>
<script encoded='false'><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("de.fum.coopto.containers").getContainerById(node,containerId) ;]]></script>
<in-binding><bind name='node' type='Coopto:DockerNode' export-name="node" ></bind>
<bind name='containerId' type='string' export-name="containerId" ></bind>
</in-binding><out-binding><bind name='actionResult' type='Coopto:DockerContainer' export-name="container" ></bind>
</out-binding><position x='624.5' y='55.40909090909091'/>
</workflow-item>
<workflow-item name='item6' out-name='item1' type='task' >
<display-name><![CDATA[Configure]]></display-name>
<script encoded='false'><![CDATA[// expose TCP port 80
ports = new Array();
ports.push(new CooptoDockerPort("tcp", 80));]]></script>
<in-binding></in-binding><out-binding><bind name='ports' type='Array/Coopto:DockerPort' export-name="ports" ></bind>
</out-binding><position x='204.5' y='55.40909090909091'/>
</workflow-item>
<presentation>
<p-param name="node"><desc><![CDATA[Node to deploy to]]></desc>
<p-qual kind="static" name="mandatory" type="boolean" ><![CDATA[true]]></p-qual></p-param>
<p-param name="containerName"><desc><![CDATA[Container name to use]]></desc>
<p-qual kind="static" name="mandatory" type="boolean" ><![CDATA[false]]></p-qual><p-qual kind="static" name="defaultValue" type="string" ><![CDATA[cncgame]]></p-qual></p-param>
</presentation></workflow>